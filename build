#!/bin/sh

# 1)
#   -p output cmake/ make errors to shell 
# 2)
#   [-out]  abs path for output of build files
#   [-log]  abs path for output of log files
# 3) must specify this one
#   abs path to top level build directory

FILE=/usr/local/etc/build_files/project_dirs

cmake_out="cmake_out.log"
cmake_err="cmake_err.log"
make_out="make_out.log"
make_err="make_err.log"

indirection () {
    # indirection for POSIX, for bash have ${!var} but cannot use in POSIX
    # Note: \ are removed from echo'd value
    
    local line name value

    set | \
    while read line; do
        name=${line%=*} value=${line#*=\'}
        if [ "$name" = "$1" ]; then
            echo ${value%\'}
        fi
    done
}

fancy_print() {
    # print message with options
    # NOTE: order of - options dont matter, text must be last 
    #   -c (RED,CYAN)
    #   -m print in middle of screen
    #   text to print

    local RED YELLOW CYAN m color text cols

    RED='\033[1;31m'
    YELLOW='\033[1;33m'
    CYAN='\033[1;36m'

    while true; do
        case "$1" in
            -m) m=" "; shift 1;;
            -c) color="$2"; shift 2;;
            *) text="$1"; break;;
        esac
    done

    printf "\\$(indirection $color)"
    if [ ! "$m" = "" ]; then
        cols=$((($(tput cols) / 2) - (${#text} / 2)))
        printf "%0.s " $(seq 1 $cols)
    fi
    printf "$text\033[0m"
}

add_project() {
    # add project name and build dir to file
    #   $1 corresponing project name taken from full path
    #   $2 the path to build artificats
    # file format is
    # $1 $2

    local found line build_dir has_delim

    found=$(grep -n "$1" "$FILE")
    if [ "$found" != "" ]; then # found match already
        line=$(echo $found | sed 's/:.*//')
        build_dir=$(head -n "$line" "$FILE" | tail -1 | awk '{print $2}')
        if [ "$2" != "$build_dir" ]; then # new build dir
            rm -fr $build_dir # FEATURE: add flag which allows to keep, will need to keep track of multiple dirs
            fancy_print -c YELLOW "[Log] "
            echo "removing old build directory $build_dir"

            has_delim=$(echo "$1 $2 $build_dir" | grep ";")
            if [ "$has_delim" != "" ]; then # has ; somewhere in path, will cause sed to fail with ; delim
                # FEATURE: change delim such that it is not found in any of $1 $2 $build_dir
                #          or add escape \ if it is found that delim is in one of them
                fancy_print -c RED "[Error Fatal] " >&2
                >&2 echo "cannot contain ;"
                exit 1
            fi

            sed -i "s;$1 ${build_dir};$1 $2;" "$FILE" # change old path to new
        fi
        return
    fi
    
    echo "$1 $2" >> "$FILE"
}

check_perms_r() {
    # check entire starting directory for correct permissions of items to be able to build
    #   1) directory - user must have r/x
    #      file      - user must have r
    #   2) the directory the function is called from is base directory
    # return 0 if all permissions okay, 1 otherwise

    local link file fail

    ls -l | tail -n +2 | grep -q "^d"
    if [ "$?" -ne 0 ]; then # no dirs found, base case
        # check for premissions of all files in folder
        fail=0
        for file in *; do
            [ -f "$file" ] || continue # if empty, continue
            if [ ! -r "$file" ]; then
                fancy_print -c RED "[Error] " >&2
                >&2 echo "need r permissions for $(pwd)/$file"
                fail=1
            fi
        done
        return $fail
    fi

    fail=0
    for link in *; do
        if [ -d "$link" ]; then # directory
            if [ ! -r "$link" ] || [ ! -x "$link" ]; then # do not have premissions for dir
                fancy_print -c RED "[Error] " >&2
                >&2 echo "need r/x permissions for $(pwd)/$link"
            else
                cd "$link"
                check_perms_r
                if [ "$?" -ne 0 ]; then
                    fail=1
                fi
                cd ..
            fi
        else # file
            if [ ! -r "$link" ]; then
                fancy_print -c RED "[Error] " >&2
                >&2 echo "need r permissions for $(pwd)/$link"
                fail=1
            fi
        fi
    done

    return "$fail"
}

safe_create() {
    # gaurenteed to create directory inside of path
    #   -n base name of directory to create
    #       if cannot create, will append characters to name until ok
    #   -p path to create inside of
    #   -f if directory exists, force creation of new directory
    # assume correct permissiosn exist
    # return 0 on success, 1 on failure
    #   on success, made path is sent to standard out

    local base path force full i

    while getopts ":n:p:" arg; do
        case "${arg}" in
            n) base=${OPTARG};;
            p) path=${OPTARG};;
            f) force=" ";;
            *) >&2 echo "invalid option: $arg"; return 1;;
        esac
    done

    if [ ! -d "$path" ] || [ "$base" = "" ]; then return 1; fi

    full="$path/$base"
    if [ ! -d "$full" ]; then
        mkdir "$full"
        echo "$full"
        return 0
    fi

    if [ "$force" = "" ]; then
        echo "$full"
        return 0
    fi

    i=0
    while [ -d "${full}_$i" ]; do
        i=$(($i + 1))
    done

    mkdir "${full}_$i"
    echo "${full}_$i"
    return 0
}

while [ $# -ne 1 ]; do
    case "$1" in
        -p) p=" ";;
        # -proj=*) project_dir="${1#*=}";;
        -out=*)  build_dir="${1#*=}";;
        -log=*)  log_dir="${1#*=}";;
        *)
            fancy_print -c RED "[Error] " >&2
            >&2 echo "Inechovalid arg: $1"
            ;;
    esac

    shift
done

project_dir="$1"

if [ ! -d "$project_dir" ]; then
    fancy_print -c RED "[Error Fatal] " >&2
    >&2 echo "must specify top level project directory as absolute path, current path \"$project_dir\""
    exit 1
fi

# by default following should both be in $proj_build_dir
# $build_dir directory to store build artifacts
# $log_dir directory to store log files
#   contains all 4 log files

# need to do the check that $project_dir doesnt contain the delim (_)
# its somewhere in one of the funcs (add_project)
#   to test that you actually need to do check, use path for $project_dir which contains _
proj_build_dir=$(echo "$project_dir" | sed 's_/$__;s_^/__;s_/_-_g') # output directory for current project

sudo -nv 2>> /dev/null
if [ "$?" -ne 0 ]; then # not ran with root premissions
    cd $project_dir
    check_perms_r
    if [ "$?" -ne 0 ]; then
        fancy_print -c RED "[Error Fatal] " >&2
        >&2 echo "missing premissions"
        exit 1
    fi
    cd - > /dev/null

    # have write premissions to $project_dir, if paths not given
    # store files in folders in $project_dir
    if [ ! -d "$build_dir" ] && [ -w "$project_dir" ]; then # use default build dir
        build_dir=$(safe_create -n build -p "$project_dir")

        fancy_print -c CYAN "[Info] "
        echo "build dir not found or not given, use default"
    fi
    if [ ! -d "$log_dir" ] && [ -w "$project_dir" ]; then # use default log dir
        log_dir=$(safe_create -n log -p "$project_dir")

        fancy_print -c CYAN "[Info] "
        echo "log dir not found or not given, use default"
    fi

    # do not have write premissions to $project_dir, if paths not given
    # attempt to store files in home directory of current user.
    # if fails, cannot store files, fatally exit
    user_base=$(safe_create -n build_artifacts -p /home/$(whoami))
    project_base=$(safe_create -n "$proj_build_dir" -p "$user_base")
    if [ "$?" -ne 0 ]; then # something went wrong, must exit
        fancy_print -c RED "[Error] "
        echo "cannot create \"$proj_build_dir\" in \"$project_base\", specify build and log paths"
        exit 1
    fi
    if [ ! -d "$build_dir" ]; then
        build_dir=$(safe_create -n build -p "$project_base")

        fancy_print -c CYAN "[Info] "
        echo "build dir not found, no write premissions into project directory, use home folder of user"
    fi
    if [ ! -d "$log_dir" ]; then
        log_dir=$(safe_create -n log -p "$project_base")

        fancy_print -c CYAN "[Info] "
        echo "log dir not found, no write premissions into project directory, use home folder of user"
    fi
else # ran with root premissions    
    fancy_print -c RED "[Error Fatal] " >&2
    >&2 echo "do not build as root"
    exit 1
fi

fancy_print -c CYAN "[Info] "
echo "build dir is: $build_dir"

fancy_print -c CYAN "[Info] "
echo "log dir is: $log_dir"

add_project "$proj_build_dir" "$build_dir"
fancy_print -c CYAN "[Info] "
echo "added \"$build_dir\" to tracked paths"

if [ -d "$build_dir" ]; then
    fancy_print -c CYAN "[Info] "
    echo "last built $(ls -lt $build_dir | head -n 2 | tail -n 1 | awk '{print $6" "$7" "$8}')"
fi

cd "$build_dir"

if [ "$(which cmake)" = "" ]; then
    fancy_print -c RED "[Error Fatal] " >&2
    >&2 echo "cmake not found"
    exit 1 
fi

# FEATURE: cmake variables 
cmake "$project_dir" > "${log_dir}/$cmake_out" 2> "${log_dir}/$cmake_err"

if [ $(du -b "${log_dir}/$cmake_err" | awk '{print $1}') -ne 0 ]; then # cmake outputted error
    fancy_print -c RED "[Error]"
    printf "\n"
    if [ "$p" = " " ]; then
        >&2 cat "${log_dir}/$cmake_err"
    fi
    printf "\n\n\n"
        fancy_print -m -c RED Cmake Error
    printf "\n\n\n"

    exit 1
fi

fancy_print -c YELLOW "[Log] "
echo "logged cmake standard out to $log_dir/$cmake_out"

if [ "$(which make)" = "" ]; then
    fancy_print -c RED "[Error Fatal] " >&2
    >&2 echo "make not found"
    exit 1 
fi

make > "${log_dir}/$make_out" 2> "${log_dir}/$make_err"

fancy_print -c CYAN "[Info] "
echo "build artifacts in $build_dir"

if [ $(du -b "${log_dir}/$make_err" | awk '{print $1}') -ne 0 ]; then # make outputted error
    fancy_print -c RED "[Error]"
    printf "\n"
    if [ "$p" = " " ]; then
        >&2 cat "${log_dir}/$cmake_err"
    fi
    printf "\n\n\n"
        fancy_print -m -c RED Make Error
    printf "\n\n\n"

    exit 1
fi

fancy_print -c YELLOW "[Log] "
echo "logged make standard out to $log_dir/$make_out"

fancy_print -c CYAN "[Info] "
echo success

exit 0